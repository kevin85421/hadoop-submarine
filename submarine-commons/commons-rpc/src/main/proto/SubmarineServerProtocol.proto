// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.apache.submarine.commons.rpc";
option java_outer_classname = "SubmarineServerRpc";

// Interface exported by the server.
service SubmarineServerProtocol {
  // Submit a job to submarine server.
  rpc SubmitJob(ParameterProto) returns (ApplicationIdProto) {}

  // test rpc
  rpc TestRpc(ParametersHolderProto) returns (ApplicationIdProto) {}

  // A server-to-client streaming RPC.
  //
  // Obtains the Features available within the given Rectangle.  Results are
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field), as the rectangle may cover a large area and contain a
  // huge number of features.
  // rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // A client-to-server streaming RPC.
  //
  // Accepts a stream of Points on a route being traversed, returning a
  // RouteSummary when traversal is completed.
  // rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // A Bidirectional streaming RPC.
  //
  // Accepts a stream of RouteNotes sent while a route is being traversed,
  // while receiving other RouteNotes (e.g. from other users).
  // rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}

message ParametersHolderProto {
  int32 helloworld = 1;
}

message ParameterProto {
  string framework = 1;
  PyTorchRunJobParameterProto pytorch_run_job_parameter = 2;
  TensorFlowRunJobParameterProto tensorflow_run_job_parameter = 3;
  ShowJobParameterProto show_job_parameter = 4;
  map<string, string> submarine_job_config_map = 5;
}

message ResourceProto {
  map<string, int64> resource_map = 1;
}


message RoleParameterProto {
  string role = 1;
  int32 replicas = 2;
  string launch_command = 3;
  string docker_image = 4;
  ResourceProto resource_proto = 5;
}

message LocalizationProto {
  string remote_uri = 1;
  string local_path = 2;
  string mount_permission = 3;
}

message QuicklinkProto {
  string label = 1;
  string component_instance_name = 2;
  string protocol = 3;
  int32 port = 4;
}

message RunParameterProto {
  string name = 1;
  string saved_model_path = 2;
  string docker_image_name = 3;
  string queue = 4;
  repeated string envars = 5;
  string input = 6;
  string checkpoint_path = 7;
  repeated QuicklinkProto quicklinks = 8;
  repeated LocalizationProto localizations = 9;
  bool wait_job_finish = 10;
  bool distributed = 11;
  bool security_disabled = 12;
  string keytab = 13;
  string principal = 14;
  bool distribute_keytab = 15;
  repeated string conf_pairs = 16;
  RoleParameterProto worker_parameter = 17;
}

message PyTorchRunJobParameterProto {
  RunParameterProto run_parameter_proto = 1;
}

message TensorFlowRunJobParameterProto {
  RunParameterProto run_parameter_proto = 1;
  bool tensorboard_enabled = 2;
  RoleParameterProto ps_parameter = 3;
  RoleParameterProto tensor_board_parameter = 4;
}

message ShowJobParameterProto {
  string name = 1;
}

message ApplicationIdProto {
  // One corner of the rectangle.
  string application_id = 1;
}
